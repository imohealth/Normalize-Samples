/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IMO.NormalizeSearch.SDK.Client;
using IMO.NormalizeSearch.SDK.Model;

namespace IMO.NormalizeSearch.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INormalizeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <remarks>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </remarks>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>NormalizeResponse</returns>
        NormalizeResponse Normalize (NormalizeRequest normalizeRequest = default(NormalizeRequest));

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <remarks>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </remarks>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>ApiResponse of NormalizeResponse</returns>
        ApiResponse<NormalizeResponse> NormalizeWithHttpInfo (NormalizeRequest normalizeRequest = default(NormalizeRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INormalizeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <remarks>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </remarks>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>Task of NormalizeResponse</returns>
        System.Threading.Tasks.Task<NormalizeResponse> NormalizeAsync (NormalizeRequest normalizeRequest = default(NormalizeRequest));

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <remarks>
        /// Normalize a set of input terms and codes to IMO lexicals
        /// </remarks>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (NormalizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NormalizeResponse>> NormalizeAsyncWithHttpInfo (NormalizeRequest normalizeRequest = default(NormalizeRequest));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INormalizeApi : INormalizeApiSync, INormalizeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NormalizeApi : INormalizeApi
    {
        private IMO.NormalizeSearch.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NormalizeApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NormalizeApi(String basePath)
        {
            this.Configuration = IMO.NormalizeSearch.SDK.Client.Configuration.MergeConfigurations(
                IMO.NormalizeSearch.SDK.Client.GlobalConfiguration.Instance,
                new IMO.NormalizeSearch.SDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IMO.NormalizeSearch.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IMO.NormalizeSearch.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IMO.NormalizeSearch.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NormalizeApi(IMO.NormalizeSearch.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IMO.NormalizeSearch.SDK.Client.Configuration.MergeConfigurations(
                IMO.NormalizeSearch.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IMO.NormalizeSearch.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IMO.NormalizeSearch.SDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IMO.NormalizeSearch.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NormalizeApi(IMO.NormalizeSearch.SDK.Client.ISynchronousClient client,IMO.NormalizeSearch.SDK.Client.IAsynchronousClient asyncClient, IMO.NormalizeSearch.SDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IMO.NormalizeSearch.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IMO.NormalizeSearch.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IMO.NormalizeSearch.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IMO.NormalizeSearch.SDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IMO.NormalizeSearch.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>NormalizeResponse</returns>
        public NormalizeResponse Normalize (NormalizeRequest normalizeRequest = default(NormalizeRequest))
        {
             IMO.NormalizeSearch.SDK.Client.ApiResponse<NormalizeResponse> localVarResponse = NormalizeWithHttpInfo(normalizeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>ApiResponse of NormalizeResponse</returns>
        public IMO.NormalizeSearch.SDK.Client.ApiResponse< NormalizeResponse > NormalizeWithHttpInfo (NormalizeRequest normalizeRequest = default(NormalizeRequest))
        {
            IMO.NormalizeSearch.SDK.Client.RequestOptions localVarRequestOptions = new IMO.NormalizeSearch.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = IMO.NormalizeSearch.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IMO.NormalizeSearch.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = normalizeRequest;

            // authentication (application) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NormalizeResponse >("/precision/normalize/v1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Normalize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>Task of NormalizeResponse</returns>
        public async System.Threading.Tasks.Task<NormalizeResponse> NormalizeAsync (NormalizeRequest normalizeRequest = default(NormalizeRequest))
        {
             IMO.NormalizeSearch.SDK.Client.ApiResponse<NormalizeResponse> localVarResponse = await NormalizeAsyncWithHttpInfo(normalizeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Normalize a set of input terms and codes to IMO lexicals Normalize a set of input terms and codes to IMO lexicals
        /// </summary>
        /// <exception cref="IMO.NormalizeSearch.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="normalizeRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (NormalizeResponse)</returns>
        public async System.Threading.Tasks.Task<IMO.NormalizeSearch.SDK.Client.ApiResponse<NormalizeResponse>> NormalizeAsyncWithHttpInfo (NormalizeRequest normalizeRequest = default(NormalizeRequest))
        {

            IMO.NormalizeSearch.SDK.Client.RequestOptions localVarRequestOptions = new IMO.NormalizeSearch.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = normalizeRequest;

            // authentication (application) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NormalizeResponse>("/precision/normalize/v1", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Normalize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
