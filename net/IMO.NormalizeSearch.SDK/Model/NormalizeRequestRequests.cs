/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeRequestRequests
    /// </summary>
    [DataContract]
    public partial class NormalizeRequestRequests :  IEquatable<NormalizeRequestRequests>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeRequestRequests" /> class.
        /// </summary>
        /// <param name="recordId">The unique identifier of the record from the partner application.</param>
        /// <param name="domain">IMO content domain, supported values are \&quot;Problem|Procedure|Medication|Lab|Auto\&quot;. \&quot;Auto\&quot; is for auto domain resolution, IMO will try to determine which IMO domain the input term or input code belongs to..</param>
        /// <param name="inputTerm">The title of the term that will be normalized.</param>
        /// <param name="inputCode">The code of the term that will be normalized.</param>
        /// <param name="inputCodeSystem">The code system of the input_code (&#39;ICD-10-CM&#39;, &#39;ICD-9-CM&#39;, &#39;SNOMED CT&#39;, &#39;ICD-10-PCS&#39;, &#39;LOINC&#39;, &#39;CPT&#39;, &#39;HCPCS&#39;, &#39;RXNORM&#39;, or &#39;IMO&#39;).</param>
        /// <param name="context">The context of the request, in key/value pairs..</param>
        public NormalizeRequestRequests(string recordId = default(string), string domain = default(string), string inputTerm = default(string), string inputCode = default(string), string inputCodeSystem = default(string), Dictionary<string, Object> context = default(Dictionary<string, Object>))
        {
            this.RecordId = recordId;
            this.Domain = domain;
            this.InputTerm = inputTerm;
            this.InputCode = inputCode;
            this.InputCodeSystem = inputCodeSystem;
            this.Context = context;
        }
        
        /// <summary>
        /// The unique identifier of the record from the partner application
        /// </summary>
        /// <value>The unique identifier of the record from the partner application</value>
        [DataMember(Name="record_id", EmitDefaultValue=false)]
        public string RecordId { get; set; }

        /// <summary>
        /// IMO content domain, supported values are \&quot;Problem|Procedure|Medication|Lab|Auto\&quot;. \&quot;Auto\&quot; is for auto domain resolution, IMO will try to determine which IMO domain the input term or input code belongs to.
        /// </summary>
        /// <value>IMO content domain, supported values are \&quot;Problem|Procedure|Medication|Lab|Auto\&quot;. \&quot;Auto\&quot; is for auto domain resolution, IMO will try to determine which IMO domain the input term or input code belongs to.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// The title of the term that will be normalized
        /// </summary>
        /// <value>The title of the term that will be normalized</value>
        [DataMember(Name="input_term", EmitDefaultValue=false)]
        public string InputTerm { get; set; }

        /// <summary>
        /// The code of the term that will be normalized
        /// </summary>
        /// <value>The code of the term that will be normalized</value>
        [DataMember(Name="input_code", EmitDefaultValue=false)]
        public string InputCode { get; set; }

        /// <summary>
        /// The code system of the input_code (&#39;ICD-10-CM&#39;, &#39;ICD-9-CM&#39;, &#39;SNOMED CT&#39;, &#39;ICD-10-PCS&#39;, &#39;LOINC&#39;, &#39;CPT&#39;, &#39;HCPCS&#39;, &#39;RXNORM&#39;, or &#39;IMO&#39;)
        /// </summary>
        /// <value>The code system of the input_code (&#39;ICD-10-CM&#39;, &#39;ICD-9-CM&#39;, &#39;SNOMED CT&#39;, &#39;ICD-10-PCS&#39;, &#39;LOINC&#39;, &#39;CPT&#39;, &#39;HCPCS&#39;, &#39;RXNORM&#39;, or &#39;IMO&#39;)</value>
        [DataMember(Name="input_code_system", EmitDefaultValue=false)]
        public string InputCodeSystem { get; set; }

        /// <summary>
        /// The context of the request, in key/value pairs.
        /// </summary>
        /// <value>The context of the request, in key/value pairs.</value>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public Dictionary<string, Object> Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeRequestRequests {\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  InputTerm: ").Append(InputTerm).Append("\n");
            sb.Append("  InputCode: ").Append(InputCode).Append("\n");
            sb.Append("  InputCodeSystem: ").Append(InputCodeSystem).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeRequestRequests);
        }

        /// <summary>
        /// Returns true if NormalizeRequestRequests instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeRequestRequests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeRequestRequests input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.InputTerm == input.InputTerm ||
                    (this.InputTerm != null &&
                    this.InputTerm.Equals(input.InputTerm))
                ) && 
                (
                    this.InputCode == input.InputCode ||
                    (this.InputCode != null &&
                    this.InputCode.Equals(input.InputCode))
                ) && 
                (
                    this.InputCodeSystem == input.InputCodeSystem ||
                    (this.InputCodeSystem != null &&
                    this.InputCodeSystem.Equals(input.InputCodeSystem))
                ) && 
                (
                    this.Context == input.Context ||
                    this.Context != null &&
                    input.Context != null &&
                    this.Context.SequenceEqual(input.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.InputTerm != null)
                    hashCode = hashCode * 59 + this.InputTerm.GetHashCode();
                if (this.InputCode != null)
                    hashCode = hashCode * 59 + this.InputCode.GetHashCode();
                if (this.InputCodeSystem != null)
                    hashCode = hashCode * 59 + this.InputCodeSystem.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
