/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata :  IEquatable<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata" /> class.
        /// </summary>
        /// <param name="ccsr">Contains an array of CCSR objects. Each item in the array is a CCSR category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM or ICD-10-PCS) ccsr will be an empty array..</param>
        /// <param name="hcc">Contains an array of HCC objects. Each item in the array is an HCC category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM) hcc will be an empty array..</param>
        public NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata(List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataCcsr> ccsr = default(List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataCcsr>), List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc> hcc = default(List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc>))
        {
            this.Ccsr = ccsr;
            this.Hcc = hcc;
        }
        
        /// <summary>
        /// Contains an array of CCSR objects. Each item in the array is a CCSR category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM or ICD-10-PCS) ccsr will be an empty array.
        /// </summary>
        /// <value>Contains an array of CCSR objects. Each item in the array is a CCSR category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM or ICD-10-PCS) ccsr will be an empty array.</value>
        [DataMember(Name="ccsr", EmitDefaultValue=false)]
        public List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataCcsr> Ccsr { get; set; }

        /// <summary>
        /// Contains an array of HCC objects. Each item in the array is an HCC category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM) hcc will be an empty array.
        /// </summary>
        /// <value>Contains an array of HCC objects. Each item in the array is an HCC category associated with the code. If no categories are associated with the code from an applicable code system (ICD-10-CM) hcc will be an empty array.</value>
        [DataMember(Name="hcc", EmitDefaultValue=false)]
        public List<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc> Hcc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata {\n");
            sb.Append("  Ccsr: ").Append(Ccsr).Append("\n");
            sb.Append("  Hcc: ").Append(Hcc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ccsr == input.Ccsr ||
                    this.Ccsr != null &&
                    input.Ccsr != null &&
                    this.Ccsr.SequenceEqual(input.Ccsr)
                ) && 
                (
                    this.Hcc == input.Hcc ||
                    this.Hcc != null &&
                    input.Hcc != null &&
                    this.Hcc.SequenceEqual(input.Hcc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ccsr != null)
                    hashCode = hashCode * 59 + this.Ccsr.GetHashCode();
                if (this.Hcc != null)
                    hashCode = hashCode * 59 + this.Hcc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
