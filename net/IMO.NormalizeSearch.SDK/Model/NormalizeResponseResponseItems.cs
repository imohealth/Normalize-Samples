/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseItems
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseItems :  IEquatable<NormalizeResponseResponseItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseItems" /> class.
        /// </summary>
        /// <param name="code">IMO code which the input title matches to.</param>
        /// <param name="title">IMO title which the input title matches to.</param>
        /// <param name="lexicalCode">IMO Lexical code which the input title matches to.</param>
        /// <param name="lexicalTitle">IMO Lexical title which the input title matches to.</param>
        /// <param name="defaultLexicalCode">IMO Lexical code for the default variant of an IMO concept (e.g. “heart attack” points to “myocardial infarction”).</param>
        /// <param name="defaultLexicalTitle">IMO Lexical title for the default variant of an IMO concept.</param>
        /// <param name="conceptCode">IMO Concept code which the input title matches to.</param>
        /// <param name="conceptTitle">IMO Concept title which the input title matches to.</param>
        /// <param name="score">The match score indicating quality of match. The value is between 0 and 1, with 1 being the best, an exact match.</param>
        /// <param name="certainty">A text value describing the certainty of match.</param>
        /// <param name="metadata">metadata.</param>
        public NormalizeResponseResponseItems(string code = default(string), string title = default(string), string lexicalCode = default(string), string lexicalTitle = default(string), string defaultLexicalCode = default(string), string defaultLexicalTitle = default(string), string conceptCode = default(string), string conceptTitle = default(string), decimal score = default(decimal), string certainty = default(string), NormalizeResponseResponseMetadata metadata = default(NormalizeResponseResponseMetadata))
        {
            this.Code = code;
            this.Title = title;
            this.LexicalCode = lexicalCode;
            this.LexicalTitle = lexicalTitle;
            this.DefaultLexicalCode = defaultLexicalCode;
            this.DefaultLexicalTitle = defaultLexicalTitle;
            this.ConceptCode = conceptCode;
            this.ConceptTitle = conceptTitle;
            this.Score = score;
            this.Certainty = certainty;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// IMO code which the input title matches to
        /// </summary>
        /// <value>IMO code which the input title matches to</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// IMO title which the input title matches to
        /// </summary>
        /// <value>IMO title which the input title matches to</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// IMO Lexical code which the input title matches to
        /// </summary>
        /// <value>IMO Lexical code which the input title matches to</value>
        [DataMember(Name="lexical_code", EmitDefaultValue=false)]
        public string LexicalCode { get; set; }

        /// <summary>
        /// IMO Lexical title which the input title matches to
        /// </summary>
        /// <value>IMO Lexical title which the input title matches to</value>
        [DataMember(Name="lexical_title", EmitDefaultValue=false)]
        public string LexicalTitle { get; set; }

        /// <summary>
        /// IMO Lexical code for the default variant of an IMO concept (e.g. “heart attack” points to “myocardial infarction”)
        /// </summary>
        /// <value>IMO Lexical code for the default variant of an IMO concept (e.g. “heart attack” points to “myocardial infarction”)</value>
        [DataMember(Name="default_lexical_code", EmitDefaultValue=false)]
        public string DefaultLexicalCode { get; set; }

        /// <summary>
        /// IMO Lexical title for the default variant of an IMO concept
        /// </summary>
        /// <value>IMO Lexical title for the default variant of an IMO concept</value>
        [DataMember(Name="default_lexical_title", EmitDefaultValue=false)]
        public string DefaultLexicalTitle { get; set; }

        /// <summary>
        /// IMO Concept code which the input title matches to
        /// </summary>
        /// <value>IMO Concept code which the input title matches to</value>
        [DataMember(Name="concept_code", EmitDefaultValue=false)]
        public string ConceptCode { get; set; }

        /// <summary>
        /// IMO Concept title which the input title matches to
        /// </summary>
        /// <value>IMO Concept title which the input title matches to</value>
        [DataMember(Name="concept_title", EmitDefaultValue=false)]
        public string ConceptTitle { get; set; }

        /// <summary>
        /// The match score indicating quality of match. The value is between 0 and 1, with 1 being the best, an exact match
        /// </summary>
        /// <value>The match score indicating quality of match. The value is between 0 and 1, with 1 being the best, an exact match</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public decimal Score { get; set; }

        /// <summary>
        /// A text value describing the certainty of match
        /// </summary>
        /// <value>A text value describing the certainty of match</value>
        [DataMember(Name="certainty", EmitDefaultValue=false)]
        public string Certainty { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseItems {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  LexicalCode: ").Append(LexicalCode).Append("\n");
            sb.Append("  LexicalTitle: ").Append(LexicalTitle).Append("\n");
            sb.Append("  DefaultLexicalCode: ").Append(DefaultLexicalCode).Append("\n");
            sb.Append("  DefaultLexicalTitle: ").Append(DefaultLexicalTitle).Append("\n");
            sb.Append("  ConceptCode: ").Append(ConceptCode).Append("\n");
            sb.Append("  ConceptTitle: ").Append(ConceptTitle).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Certainty: ").Append(Certainty).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseItems);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseItems instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.LexicalCode == input.LexicalCode ||
                    (this.LexicalCode != null &&
                    this.LexicalCode.Equals(input.LexicalCode))
                ) && 
                (
                    this.LexicalTitle == input.LexicalTitle ||
                    (this.LexicalTitle != null &&
                    this.LexicalTitle.Equals(input.LexicalTitle))
                ) && 
                (
                    this.DefaultLexicalCode == input.DefaultLexicalCode ||
                    (this.DefaultLexicalCode != null &&
                    this.DefaultLexicalCode.Equals(input.DefaultLexicalCode))
                ) && 
                (
                    this.DefaultLexicalTitle == input.DefaultLexicalTitle ||
                    (this.DefaultLexicalTitle != null &&
                    this.DefaultLexicalTitle.Equals(input.DefaultLexicalTitle))
                ) && 
                (
                    this.ConceptCode == input.ConceptCode ||
                    (this.ConceptCode != null &&
                    this.ConceptCode.Equals(input.ConceptCode))
                ) && 
                (
                    this.ConceptTitle == input.ConceptTitle ||
                    (this.ConceptTitle != null &&
                    this.ConceptTitle.Equals(input.ConceptTitle))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Certainty == input.Certainty ||
                    (this.Certainty != null &&
                    this.Certainty.Equals(input.Certainty))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.LexicalCode != null)
                    hashCode = hashCode * 59 + this.LexicalCode.GetHashCode();
                if (this.LexicalTitle != null)
                    hashCode = hashCode * 59 + this.LexicalTitle.GetHashCode();
                if (this.DefaultLexicalCode != null)
                    hashCode = hashCode * 59 + this.DefaultLexicalCode.GetHashCode();
                if (this.DefaultLexicalTitle != null)
                    hashCode = hashCode * 59 + this.DefaultLexicalTitle.GetHashCode();
                if (this.ConceptCode != null)
                    hashCode = hashCode * 59 + this.ConceptCode.GetHashCode();
                if (this.ConceptTitle != null)
                    hashCode = hashCode * 59 + this.ConceptTitle.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Certainty != null)
                    hashCode = hashCode * 59 + this.Certainty.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
