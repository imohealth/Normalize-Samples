/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseMetadataMappings
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseMetadataMappings :  IEquatable<NormalizeResponseResponseMetadataMappings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseMetadataMappings" /> class.
        /// </summary>
        /// <param name="icd10cm">icd10cm.</param>
        /// <param name="icd9cm">icd9cm.</param>
        /// <param name="snomedInternational">snomedInternational.</param>
        /// <param name="icd10pcs">icd10pcs.</param>
        /// <param name="loinc">loinc.</param>
        /// <param name="cpt">cpt.</param>
        /// <param name="hcpcs">hcpcs.</param>
        /// <param name="rxnorm">rxnorm.</param>
        /// <param name="ndc">ndc.</param>
        public NormalizeResponseResponseMetadataMappings(NormalizeResponseResponseMetadataMappingsIcd10cm icd10cm = default(NormalizeResponseResponseMetadataMappingsIcd10cm), NormalizeResponseResponseMetadataMappingsIcd9cm icd9cm = default(NormalizeResponseResponseMetadataMappingsIcd9cm), NormalizeResponseResponseMetadataMappingsSnomedInternational snomedInternational = default(NormalizeResponseResponseMetadataMappingsSnomedInternational), NormalizeResponseResponseMetadataMappingsIcd10pcs icd10pcs = default(NormalizeResponseResponseMetadataMappingsIcd10pcs), NormalizeResponseResponseMetadataMappingsLoinc loinc = default(NormalizeResponseResponseMetadataMappingsLoinc), NormalizeResponseResponseMetadataMappingsCpt cpt = default(NormalizeResponseResponseMetadataMappingsCpt), NormalizeResponseResponseMetadataMappingsHcpcs hcpcs = default(NormalizeResponseResponseMetadataMappingsHcpcs), NormalizeResponseResponseMetadataMappingsRxnorm rxnorm = default(NormalizeResponseResponseMetadataMappingsRxnorm), NormalizeResponseResponseMetadataMappingsNdc ndc = default(NormalizeResponseResponseMetadataMappingsNdc))
        {
            this.Icd10cm = icd10cm;
            this.Icd9cm = icd9cm;
            this.SnomedInternational = snomedInternational;
            this.Icd10pcs = icd10pcs;
            this.Loinc = loinc;
            this.Cpt = cpt;
            this.Hcpcs = hcpcs;
            this.Rxnorm = rxnorm;
            this.Ndc = ndc;
        }
        
        /// <summary>
        /// Gets or Sets Icd10cm
        /// </summary>
        [DataMember(Name="icd10cm", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsIcd10cm Icd10cm { get; set; }

        /// <summary>
        /// Gets or Sets Icd9cm
        /// </summary>
        [DataMember(Name="icd9cm", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsIcd9cm Icd9cm { get; set; }

        /// <summary>
        /// Gets or Sets SnomedInternational
        /// </summary>
        [DataMember(Name="snomedInternational", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsSnomedInternational SnomedInternational { get; set; }

        /// <summary>
        /// Gets or Sets Icd10pcs
        /// </summary>
        [DataMember(Name="icd10pcs", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsIcd10pcs Icd10pcs { get; set; }

        /// <summary>
        /// Gets or Sets Loinc
        /// </summary>
        [DataMember(Name="loinc", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsLoinc Loinc { get; set; }

        /// <summary>
        /// Gets or Sets Cpt
        /// </summary>
        [DataMember(Name="cpt", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsCpt Cpt { get; set; }

        /// <summary>
        /// Gets or Sets Hcpcs
        /// </summary>
        [DataMember(Name="hcpcs", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsHcpcs Hcpcs { get; set; }

        /// <summary>
        /// Gets or Sets Rxnorm
        /// </summary>
        [DataMember(Name="rxnorm", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsRxnorm Rxnorm { get; set; }

        /// <summary>
        /// Gets or Sets Ndc
        /// </summary>
        [DataMember(Name="ndc", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsNdc Ndc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseMetadataMappings {\n");
            sb.Append("  Icd10cm: ").Append(Icd10cm).Append("\n");
            sb.Append("  Icd9cm: ").Append(Icd9cm).Append("\n");
            sb.Append("  SnomedInternational: ").Append(SnomedInternational).Append("\n");
            sb.Append("  Icd10pcs: ").Append(Icd10pcs).Append("\n");
            sb.Append("  Loinc: ").Append(Loinc).Append("\n");
            sb.Append("  Cpt: ").Append(Cpt).Append("\n");
            sb.Append("  Hcpcs: ").Append(Hcpcs).Append("\n");
            sb.Append("  Rxnorm: ").Append(Rxnorm).Append("\n");
            sb.Append("  Ndc: ").Append(Ndc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseMetadataMappings);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseMetadataMappings instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseMetadataMappings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseMetadataMappings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Icd10cm == input.Icd10cm ||
                    (this.Icd10cm != null &&
                    this.Icd10cm.Equals(input.Icd10cm))
                ) && 
                (
                    this.Icd9cm == input.Icd9cm ||
                    (this.Icd9cm != null &&
                    this.Icd9cm.Equals(input.Icd9cm))
                ) && 
                (
                    this.SnomedInternational == input.SnomedInternational ||
                    (this.SnomedInternational != null &&
                    this.SnomedInternational.Equals(input.SnomedInternational))
                ) && 
                (
                    this.Icd10pcs == input.Icd10pcs ||
                    (this.Icd10pcs != null &&
                    this.Icd10pcs.Equals(input.Icd10pcs))
                ) && 
                (
                    this.Loinc == input.Loinc ||
                    (this.Loinc != null &&
                    this.Loinc.Equals(input.Loinc))
                ) && 
                (
                    this.Cpt == input.Cpt ||
                    (this.Cpt != null &&
                    this.Cpt.Equals(input.Cpt))
                ) && 
                (
                    this.Hcpcs == input.Hcpcs ||
                    (this.Hcpcs != null &&
                    this.Hcpcs.Equals(input.Hcpcs))
                ) && 
                (
                    this.Rxnorm == input.Rxnorm ||
                    (this.Rxnorm != null &&
                    this.Rxnorm.Equals(input.Rxnorm))
                ) && 
                (
                    this.Ndc == input.Ndc ||
                    (this.Ndc != null &&
                    this.Ndc.Equals(input.Ndc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Icd10cm != null)
                    hashCode = hashCode * 59 + this.Icd10cm.GetHashCode();
                if (this.Icd9cm != null)
                    hashCode = hashCode * 59 + this.Icd9cm.GetHashCode();
                if (this.SnomedInternational != null)
                    hashCode = hashCode * 59 + this.SnomedInternational.GetHashCode();
                if (this.Icd10pcs != null)
                    hashCode = hashCode * 59 + this.Icd10pcs.GetHashCode();
                if (this.Loinc != null)
                    hashCode = hashCode * 59 + this.Loinc.GetHashCode();
                if (this.Cpt != null)
                    hashCode = hashCode * 59 + this.Cpt.GetHashCode();
                if (this.Hcpcs != null)
                    hashCode = hashCode * 59 + this.Hcpcs.GetHashCode();
                if (this.Rxnorm != null)
                    hashCode = hashCode * 59 + this.Rxnorm.GetHashCode();
                if (this.Ndc != null)
                    hashCode = hashCode * 59 + this.Ndc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
