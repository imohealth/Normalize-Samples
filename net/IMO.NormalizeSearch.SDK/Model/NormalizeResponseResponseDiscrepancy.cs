/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseDiscrepancy
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseDiscrepancy :  IEquatable<NormalizeResponseResponseDiscrepancy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseDiscrepancy" /> class.
        /// </summary>
        /// <param name="_checked">Whether discrepancy check was being performed.</param>
        /// <param name="found">Whether discrepancy exists.</param>
        /// <param name="type">The type of the discrepancy.</param>
        /// <param name="message">The discrepancy desription between input code and input term. Valid when discrepancy_check is true. Empty when there is no discrepancy found..</param>
        public NormalizeResponseResponseDiscrepancy(bool _checked = default(bool), bool found = default(bool), string type = default(string), string message = default(string))
        {
            this.Checked = _checked;
            this.Found = found;
            this.Type = type;
            this.Message = message;
        }
        
        /// <summary>
        /// Whether discrepancy check was being performed
        /// </summary>
        /// <value>Whether discrepancy check was being performed</value>
        [DataMember(Name="checked", EmitDefaultValue=false)]
        public bool Checked { get; set; }

        /// <summary>
        /// Whether discrepancy exists
        /// </summary>
        /// <value>Whether discrepancy exists</value>
        [DataMember(Name="found", EmitDefaultValue=false)]
        public bool Found { get; set; }

        /// <summary>
        /// The type of the discrepancy
        /// </summary>
        /// <value>The type of the discrepancy</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The discrepancy desription between input code and input term. Valid when discrepancy_check is true. Empty when there is no discrepancy found.
        /// </summary>
        /// <value>The discrepancy desription between input code and input term. Valid when discrepancy_check is true. Empty when there is no discrepancy found.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseDiscrepancy {\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  Found: ").Append(Found).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseDiscrepancy);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseDiscrepancy instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseDiscrepancy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseDiscrepancy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Checked == input.Checked ||
                    this.Checked.Equals(input.Checked)
                ) && 
                (
                    this.Found == input.Found ||
                    this.Found.Equals(input.Found)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Checked.GetHashCode();
                hashCode = hashCode * 59 + this.Found.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
