/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseMetadataMappingsNdcNdcMetadata
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseMetadataMappingsNdcNdcMetadata :  IEquatable<NormalizeResponseResponseMetadataMappingsNdcNdcMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseMetadataMappingsNdcNdcMetadata" /> class.
        /// </summary>
        /// <param name="title">An NDC title for ndc_code which includes the drug name, strength, dose form, and manufacturer.</param>
        /// <param name="route">An array of route(s) of administration of the medication (e.g. oral, intravenous).</param>
        /// <param name="strength">Strength of the medication.</param>
        /// <param name="doseForm">Formulation of the medication (e.g. tablet, capsule, solution).</param>
        /// <param name="brandName">Brand name of the medication.</param>
        /// <param name="genericName">Generic name of the medication.</param>
        /// <param name="titleStatus">Indicates if the title is “Current” in the current NDC release.</param>
        /// <param name="medicationClass">An array of pharmacological class categories. If there is no official pharmacological class, such as with some herbal and OTC products, this will be null.</param>
        public NormalizeResponseResponseMetadataMappingsNdcNdcMetadata(string title = default(string), List<string> route = default(List<string>), string strength = default(string), string doseForm = default(string), string brandName = default(string), string genericName = default(string), string titleStatus = default(string), List<string> medicationClass = default(List<string>))
        {
            this.Title = title;
            this.Route = route;
            this.Strength = strength;
            this.DoseForm = doseForm;
            this.BrandName = brandName;
            this.GenericName = genericName;
            this.TitleStatus = titleStatus;
            this.MedicationClass = medicationClass;
        }
        
        /// <summary>
        /// An NDC title for ndc_code which includes the drug name, strength, dose form, and manufacturer
        /// </summary>
        /// <value>An NDC title for ndc_code which includes the drug name, strength, dose form, and manufacturer</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// An array of route(s) of administration of the medication (e.g. oral, intravenous)
        /// </summary>
        /// <value>An array of route(s) of administration of the medication (e.g. oral, intravenous)</value>
        [DataMember(Name="route", EmitDefaultValue=false)]
        public List<string> Route { get; set; }

        /// <summary>
        /// Strength of the medication
        /// </summary>
        /// <value>Strength of the medication</value>
        [DataMember(Name="strength", EmitDefaultValue=false)]
        public string Strength { get; set; }

        /// <summary>
        /// Formulation of the medication (e.g. tablet, capsule, solution)
        /// </summary>
        /// <value>Formulation of the medication (e.g. tablet, capsule, solution)</value>
        [DataMember(Name="dose_form", EmitDefaultValue=false)]
        public string DoseForm { get; set; }

        /// <summary>
        /// Brand name of the medication
        /// </summary>
        /// <value>Brand name of the medication</value>
        [DataMember(Name="brand_name", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Generic name of the medication
        /// </summary>
        /// <value>Generic name of the medication</value>
        [DataMember(Name="generic_name", EmitDefaultValue=false)]
        public string GenericName { get; set; }

        /// <summary>
        /// Indicates if the title is “Current” in the current NDC release
        /// </summary>
        /// <value>Indicates if the title is “Current” in the current NDC release</value>
        [DataMember(Name="title_status", EmitDefaultValue=false)]
        public string TitleStatus { get; set; }

        /// <summary>
        /// An array of pharmacological class categories. If there is no official pharmacological class, such as with some herbal and OTC products, this will be null
        /// </summary>
        /// <value>An array of pharmacological class categories. If there is no official pharmacological class, such as with some herbal and OTC products, this will be null</value>
        [DataMember(Name="medication_class", EmitDefaultValue=true)]
        public List<string> MedicationClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseMetadataMappingsNdcNdcMetadata {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("  DoseForm: ").Append(DoseForm).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  GenericName: ").Append(GenericName).Append("\n");
            sb.Append("  TitleStatus: ").Append(TitleStatus).Append("\n");
            sb.Append("  MedicationClass: ").Append(MedicationClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseMetadataMappingsNdcNdcMetadata);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseMetadataMappingsNdcNdcMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseMetadataMappingsNdcNdcMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseMetadataMappingsNdcNdcMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Route == input.Route ||
                    this.Route != null &&
                    input.Route != null &&
                    this.Route.SequenceEqual(input.Route)
                ) && 
                (
                    this.Strength == input.Strength ||
                    (this.Strength != null &&
                    this.Strength.Equals(input.Strength))
                ) && 
                (
                    this.DoseForm == input.DoseForm ||
                    (this.DoseForm != null &&
                    this.DoseForm.Equals(input.DoseForm))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.GenericName == input.GenericName ||
                    (this.GenericName != null &&
                    this.GenericName.Equals(input.GenericName))
                ) && 
                (
                    this.TitleStatus == input.TitleStatus ||
                    (this.TitleStatus != null &&
                    this.TitleStatus.Equals(input.TitleStatus))
                ) && 
                (
                    this.MedicationClass == input.MedicationClass ||
                    this.MedicationClass != null &&
                    input.MedicationClass != null &&
                    this.MedicationClass.SequenceEqual(input.MedicationClass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.Strength != null)
                    hashCode = hashCode * 59 + this.Strength.GetHashCode();
                if (this.DoseForm != null)
                    hashCode = hashCode * 59 + this.DoseForm.GetHashCode();
                if (this.BrandName != null)
                    hashCode = hashCode * 59 + this.BrandName.GetHashCode();
                if (this.GenericName != null)
                    hashCode = hashCode * 59 + this.GenericName.GetHashCode();
                if (this.TitleStatus != null)
                    hashCode = hashCode * 59 + this.TitleStatus.GetHashCode();
                if (this.MedicationClass != null)
                    hashCode = hashCode * 59 + this.MedicationClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
