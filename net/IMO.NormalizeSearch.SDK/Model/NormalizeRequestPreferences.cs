/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeRequestPreferences
    /// </summary>
    [DataContract]
    public partial class NormalizeRequestPreferences :  IEquatable<NormalizeRequestPreferences>, IValidatableObject
    {
        /// <summary>
        /// The input field to match on (input_term, input_code, input_term_first, input_code_first). “input_term_first” will try match on input term first, if the match score is below threshold, it will then try match on the input code. “input_code_first” will try match on input code first, if code is not found, it will try match on the input term.
        /// </summary>
        /// <value>The input field to match on (input_term, input_code, input_term_first, input_code_first). “input_term_first” will try match on input term first, if the match score is below threshold, it will then try match on the input code. “input_code_first” will try match on input code first, if code is not found, it will try match on the input term.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchFieldPrefEnum
        {
            /// <summary>
            /// Enum Term for value: input_term
            /// </summary>
            [EnumMember(Value = "input_term")]
            Term = 1,

            /// <summary>
            /// Enum Code for value: input_code
            /// </summary>
            [EnumMember(Value = "input_code")]
            Code = 2,

            /// <summary>
            /// Enum Termfirst for value: input_term_first
            /// </summary>
            [EnumMember(Value = "input_term_first")]
            Termfirst = 3,

            /// <summary>
            /// Enum Codefirst for value: input_code_first
            /// </summary>
            [EnumMember(Value = "input_code_first")]
            Codefirst = 4

        }

        /// <summary>
        /// The input field to match on (input_term, input_code, input_term_first, input_code_first). “input_term_first” will try match on input term first, if the match score is below threshold, it will then try match on the input code. “input_code_first” will try match on input code first, if code is not found, it will try match on the input term.
        /// </summary>
        /// <value>The input field to match on (input_term, input_code, input_term_first, input_code_first). “input_term_first” will try match on input term first, if the match score is below threshold, it will then try match on the input code. “input_code_first” will try match on input code first, if code is not found, it will try match on the input term.</value>
        [DataMember(Name="match_field_pref", EmitDefaultValue=false)]
        public MatchFieldPrefEnum? MatchFieldPref { get; set; }
        /// <summary>
        /// The desired field to filter by unique results.
        /// </summary>
        /// <value>The desired field to filter by unique results.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistinctFieldEnum
        {
            /// <summary>
            /// Enum Lexicalcode for value: lexical_code
            /// </summary>
            [EnumMember(Value = "lexical_code")]
            Lexicalcode = 1,

            /// <summary>
            /// Enum Defaultlexicalcode for value: default_lexical_code
            /// </summary>
            [EnumMember(Value = "default_lexical_code")]
            Defaultlexicalcode = 2

        }

        /// <summary>
        /// The desired field to filter by unique results.
        /// </summary>
        /// <value>The desired field to filter by unique results.</value>
        [DataMember(Name="distinct_field", EmitDefaultValue=false)]
        public DistinctFieldEnum? DistinctField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeRequestPreferences" /> class.
        /// </summary>
        /// <param name="threshold">The minimum score for the matching. Matching with score lower than the threshold will be dropped. (default to 0M).</param>
        /// <param name="matchFieldPref">The input field to match on (input_term, input_code, input_term_first, input_code_first). “input_term_first” will try match on input term first, if the match score is below threshold, it will then try match on the input code. “input_code_first” will try match on input code first, if code is not found, it will try match on the input term. (default to MatchFieldPrefEnum.Termfirst).</param>
        /// <param name="discrepancyCheck">Check if there are discrepancies between input code and input term. (default to false).</param>
        /// <param name="size">Number of match results returned. (default to 1M).</param>
        /// <param name="distinctField">The desired field to filter by unique results. (default to “lexical_code” if size &gt; 1, else null).</param>
        /// <param name="debug">Returns IMO Concept details along with IMO Lexical details for debug true and only IMO Lexical code for debug false. (default to false).</param>
        /// <param name="transformations">transformations.</param>
        /// <remarks>
        /// This was manually modified. If the OpenAPI Generator is run again, these changes will get overwritten
        /// and need to be manually reverted. The modification was to change the default value of distinctField to null.
        /// </remarks>
        public NormalizeRequestPreferences(decimal threshold = 0M, MatchFieldPrefEnum? matchFieldPref = MatchFieldPrefEnum.Termfirst, bool discrepancyCheck = false, decimal size = 1M, DistinctFieldEnum? distinctField = null, bool debug = false, List<NormalizeRequestPreferencesTransformations> transformations = default(List<NormalizeRequestPreferencesTransformations>))
        {
            this.Threshold = threshold;
            this.MatchFieldPref = matchFieldPref;
            this.DiscrepancyCheck = discrepancyCheck;
            this.Size = size;
            this.DistinctField = distinctField;
            this.Debug = debug;
            this.Transformations = transformations;
        }

        /// <summary>
        /// The minimum score for the matching. Matching with score lower than the threshold will be dropped.
        /// </summary>
        /// <value>The minimum score for the matching. Matching with score lower than the threshold will be dropped.</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public decimal Threshold { get; set; }

        /// <summary>
        /// Check if there are discrepancies between input code and input term.
        /// </summary>
        /// <value>Check if there are discrepancies between input code and input term.</value>
        [DataMember(Name="discrepancy_check", EmitDefaultValue=false)]
        public bool DiscrepancyCheck { get; set; }

        /// <summary>
        /// Number of match results returned.
        /// </summary>
        /// <value>Number of match results returned.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal Size { get; set; }

        /// <summary>
        /// Returns IMO Concept details along with IMO Lexical details for debug true and only IMO Lexical code for debug false.
        /// </summary>
        /// <value>Returns IMO Concept details along with IMO Lexical details for debug true and only IMO Lexical code for debug false.</value>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool Debug { get; set; }

        /// <summary>
        /// Gets or Sets Transformations
        /// </summary>
        [DataMember(Name="transformations", EmitDefaultValue=false)]
        public List<NormalizeRequestPreferencesTransformations> Transformations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeRequestPreferences {\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  MatchFieldPref: ").Append(MatchFieldPref).Append("\n");
            sb.Append("  DiscrepancyCheck: ").Append(DiscrepancyCheck).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DistinctField: ").Append(DistinctField).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  Transformations: ").Append(Transformations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeRequestPreferences);
        }

        /// <summary>
        /// Returns true if NormalizeRequestPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeRequestPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeRequestPreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Threshold == input.Threshold ||
                    this.Threshold.Equals(input.Threshold)
                ) && 
                (
                    this.MatchFieldPref == input.MatchFieldPref ||
                    this.MatchFieldPref.Equals(input.MatchFieldPref)
                ) && 
                (
                    this.DiscrepancyCheck == input.DiscrepancyCheck ||
                    this.DiscrepancyCheck.Equals(input.DiscrepancyCheck)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.DistinctField == input.DistinctField ||
                    this.DistinctField.Equals(input.DistinctField)
                ) && 
                (
                    this.Debug == input.Debug ||
                    this.Debug.Equals(input.Debug)
                ) && 
                (
                    this.Transformations == input.Transformations ||
                    this.Transformations != null &&
                    input.Transformations != null &&
                    this.Transformations.SequenceEqual(input.Transformations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                hashCode = hashCode * 59 + this.MatchFieldPref.GetHashCode();
                hashCode = hashCode * 59 + this.DiscrepancyCheck.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                hashCode = hashCode * 59 + this.DistinctField.GetHashCode();
                hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.Transformations != null)
                    hashCode = hashCode * 59 + this.Transformations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Threshold (decimal) maximum
            if(this.Threshold > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value less than or equal to 1.", new [] { "Threshold" });
            }

            // Threshold (decimal) minimum
            if(this.Threshold < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value greater than or equal to 0.", new [] { "Threshold" });
            }

            // Size (decimal) maximum
            if(this.Size > (decimal)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Size, must be a value less than or equal to 20.", new [] { "Size" });
            }

            // Size (decimal) minimum
            if(this.Size < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Size, must be a value greater than or equal to 1.", new [] { "Size" });
            }

            yield break;
        }
    }

}
