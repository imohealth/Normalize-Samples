/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseMetadataMappingsIcd10pcs
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseMetadataMappingsIcd10pcs :  IEquatable<NormalizeResponseResponseMetadataMappingsIcd10pcs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseMetadataMappingsIcd10pcs" /> class.
        /// </summary>
        /// <param name="codes">codes.</param>
        /// <param name="mapContext">Describes the reason no codes from this code system are mapped to the IMO lexical code. Possible values are &#39;INSUFFICIENT INFORMATION&#39; and &#39;NOT CODEABLE&#39;..</param>
        public NormalizeResponseResponseMetadataMappingsIcd10pcs(List<NormalizeResponseResponseMetadataMappingsIcd10pcsCodes> codes = default(List<NormalizeResponseResponseMetadataMappingsIcd10pcsCodes>), string mapContext = default(string))
        {
            this.Codes = codes;
            this.MapContext = mapContext;
        }
        
        /// <summary>
        /// Gets or Sets Codes
        /// </summary>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public List<NormalizeResponseResponseMetadataMappingsIcd10pcsCodes> Codes { get; set; }

        /// <summary>
        /// Describes the reason no codes from this code system are mapped to the IMO lexical code. Possible values are &#39;INSUFFICIENT INFORMATION&#39; and &#39;NOT CODEABLE&#39;.
        /// </summary>
        /// <value>Describes the reason no codes from this code system are mapped to the IMO lexical code. Possible values are &#39;INSUFFICIENT INFORMATION&#39; and &#39;NOT CODEABLE&#39;.</value>
        [DataMember(Name="map_context", EmitDefaultValue=false)]
        public string MapContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseMetadataMappingsIcd10pcs {\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  MapContext: ").Append(MapContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseMetadataMappingsIcd10pcs);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseMetadataMappingsIcd10pcs instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseMetadataMappingsIcd10pcs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseMetadataMappingsIcd10pcs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codes == input.Codes ||
                    this.Codes != null &&
                    input.Codes != null &&
                    this.Codes.SequenceEqual(input.Codes)
                ) && 
                (
                    this.MapContext == input.MapContext ||
                    (this.MapContext != null &&
                    this.MapContext.Equals(input.MapContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                if (this.MapContext != null)
                    hashCode = hashCode * 59 + this.MapContext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
