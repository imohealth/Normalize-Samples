/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc :  IEquatable<NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc" /> class.
        /// </summary>
        /// <param name="hccFactors">hccFactors.</param>
        /// <param name="hccModelCategory">The HCC model category code.</param>
        public NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc(NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHccFactors hccFactors = default(NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHccFactors), string hccModelCategory = default(string))
        {
            this.HccFactors = hccFactors;
            this.HccModelCategory = hccModelCategory;
        }
        
        /// <summary>
        /// Gets or Sets HccFactors
        /// </summary>
        [DataMember(Name="hcc_factors", EmitDefaultValue=false)]
        public NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHccFactors HccFactors { get; set; }

        /// <summary>
        /// The HCC model category code
        /// </summary>
        /// <value>The HCC model category code</value>
        [DataMember(Name="hcc_model_category", EmitDefaultValue=false)]
        public string HccModelCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc {\n");
            sb.Append("  HccFactors: ").Append(HccFactors).Append("\n");
            sb.Append("  HccModelCategory: ").Append(HccModelCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponseMetadataMappingsIcd10cmCodeMetadataHcc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HccFactors == input.HccFactors ||
                    (this.HccFactors != null &&
                    this.HccFactors.Equals(input.HccFactors))
                ) && 
                (
                    this.HccModelCategory == input.HccModelCategory ||
                    (this.HccModelCategory != null &&
                    this.HccModelCategory.Equals(input.HccModelCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HccFactors != null)
                    hashCode = hashCode * 59 + this.HccFactors.GetHashCode();
                if (this.HccModelCategory != null)
                    hashCode = hashCode * 59 + this.HccModelCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
