/* 
 * IMO® Precision Normalize API
 *
 * <p>IMO® Precision Normalize provides normalization capabilities enabling standardization of inconsistent clinical data from diverse health information systems to a common, clinically validated terminology to ensure that problems, procedures, and medications have clean, enriched, and consistent meanings. This API normalizes input terms or codes to IMO identifiers.</p> <p>The information provided is confidential and proprietary. Any use of this outside an agreement or engagement with IMO is prohibited.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: customersupport@imo-online.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IMO.NormalizeSearch.SDK.Client.OpenAPIDateConverter;

namespace IMO.NormalizeSearch.SDK.Model
{
    /// <summary>
    /// NormalizeResponseResponse
    /// </summary>
    [DataContract]
    public partial class NormalizeResponseResponse :  IEquatable<NormalizeResponseResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizeResponseResponse" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="matchField">Which input field(input_code or input_term) the match used. Valid when the match_field_pref is input_term_first or input_code_first..</param>
        /// <param name="domain">IMO domain the match result belongs to. When input domain is \&quot;Auto\&quot;, this is the domain the input resolved to..</param>
        /// <param name="customMapped">Indicates if the match that was returned was the result of a custom map in Map Manager..</param>
        /// <param name="matchIncludesAssumptions">Indicates if the match that was returned includes assumptions made by IMO. Currently only applicable to Lab domain..</param>
        /// <param name="errorMessage">An array of error messages for the given request item.</param>
        /// <param name="discrepancy">discrepancy.</param>
        public NormalizeResponseResponse(List<NormalizeResponseResponseItems> items = default(List<NormalizeResponseResponseItems>), string matchField = default(string), string domain = default(string), bool customMapped = default(bool), bool matchIncludesAssumptions = default(bool), List<string> errorMessage = default(List<string>), NormalizeResponseResponseDiscrepancy discrepancy = default(NormalizeResponseResponseDiscrepancy))
        {
            this.Items = items;
            this.MatchField = matchField;
            this.Domain = domain;
            this.CustomMapped = customMapped;
            this.MatchIncludesAssumptions = matchIncludesAssumptions;
            this.ErrorMessage = errorMessage;
            this.Discrepancy = discrepancy;
        }
        
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<NormalizeResponseResponseItems> Items { get; set; }

        /// <summary>
        /// Which input field(input_code or input_term) the match used. Valid when the match_field_pref is input_term_first or input_code_first.
        /// </summary>
        /// <value>Which input field(input_code or input_term) the match used. Valid when the match_field_pref is input_term_first or input_code_first.</value>
        [DataMember(Name="match_field", EmitDefaultValue=false)]
        public string MatchField { get; set; }

        /// <summary>
        /// IMO domain the match result belongs to. When input domain is \&quot;Auto\&quot;, this is the domain the input resolved to.
        /// </summary>
        /// <value>IMO domain the match result belongs to. When input domain is \&quot;Auto\&quot;, this is the domain the input resolved to.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Indicates if the match that was returned was the result of a custom map in Map Manager.
        /// </summary>
        /// <value>Indicates if the match that was returned was the result of a custom map in Map Manager.</value>
        [DataMember(Name="custom_mapped", EmitDefaultValue=false)]
        public bool CustomMapped { get; set; }

        /// <summary>
        /// Indicates if the match that was returned includes assumptions made by IMO. Currently only applicable to Lab domain.
        /// </summary>
        /// <value>Indicates if the match that was returned includes assumptions made by IMO. Currently only applicable to Lab domain.</value>
        [DataMember(Name="match_includes_assumptions", EmitDefaultValue=false)]
        public bool MatchIncludesAssumptions { get; set; }

        /// <summary>
        /// An array of error messages for the given request item
        /// </summary>
        /// <value>An array of error messages for the given request item</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public List<string> ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Discrepancy
        /// </summary>
        [DataMember(Name="discrepancy", EmitDefaultValue=false)]
        public NormalizeResponseResponseDiscrepancy Discrepancy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizeResponseResponse {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  MatchField: ").Append(MatchField).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  CustomMapped: ").Append(CustomMapped).Append("\n");
            sb.Append("  MatchIncludesAssumptions: ").Append(MatchIncludesAssumptions).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Discrepancy: ").Append(Discrepancy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizeResponseResponse);
        }

        /// <summary>
        /// Returns true if NormalizeResponseResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizeResponseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizeResponseResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.MatchField == input.MatchField ||
                    (this.MatchField != null &&
                    this.MatchField.Equals(input.MatchField))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.CustomMapped == input.CustomMapped ||
                    this.CustomMapped.Equals(input.CustomMapped)
                ) && 
                (
                    this.MatchIncludesAssumptions == input.MatchIncludesAssumptions ||
                    this.MatchIncludesAssumptions.Equals(input.MatchIncludesAssumptions)
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    this.ErrorMessage != null &&
                    input.ErrorMessage != null &&
                    this.ErrorMessage.SequenceEqual(input.ErrorMessage)
                ) && 
                (
                    this.Discrepancy == input.Discrepancy ||
                    (this.Discrepancy != null &&
                    this.Discrepancy.Equals(input.Discrepancy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.MatchField != null)
                    hashCode = hashCode * 59 + this.MatchField.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                hashCode = hashCode * 59 + this.CustomMapped.GetHashCode();
                hashCode = hashCode * 59 + this.MatchIncludesAssumptions.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.Discrepancy != null)
                    hashCode = hashCode * 59 + this.Discrepancy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
